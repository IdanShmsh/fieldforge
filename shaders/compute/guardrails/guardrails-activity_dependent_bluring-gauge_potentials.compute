#pragma kernel Pass0
#pragma kernel Pass1

#define THREAD_GROUP_SIZE_X 64
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1
#define THREAD_GROUP_SIZE (THREAD_GROUP_SIZE_X * THREAD_GROUP_SIZE_Y * THREAD_GROUP_SIZE_Z)

#define SPATIAL_DIMENSIONALITY 3

#define BLURRING_KERNEL_RADIUS 2

#include "../../../src/dynamics/guardrails/activity_dependent_field_blurring.hlsl"

float activity_energy_scale;
float radius_cap;

/// --------------------------------------------------------------------------------------------------------------
/// This compute-shader represents the entry point for an operation in FieldForge's configurable compute-pipeline.
/// --------------------------------------------------------------------------------------------------------------
/// This pipeline operation applies a blurring effect to the gauge potentials (blurring the field state components (not the norms))
/// with a blurring radius directly proportional to the energy density of the fields at the position in which the
/// blurring takes place.
/// Properties:
/// â€¢ activity_energy_scale (float)
///   This parameter <activity_energy_scale> is incorporated via the blurring radius calculation as:
///   blurring_radius = sqrt(1 + pow(energy_density / <activity_energy_scale>, 2)) - 1
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Pass0(uint3 dispatch_thread_id : SV_DispatchThreadID)
{
    activity_energy_scale = activity_energy_scale ? activity_energy_scale : 10.0f;
    radius_cap = radius_cap ? radius_cap : 2.0f;

    float3 position = float3(dispatch_thread_id);
    Guardrails::ActivityDependentBlurring::gauge_energy_density_dependent_blurring(position, activity_energy_scale, radius_cap, crnt_gauge_potentials_lattice_buffer, temp_gauge_lattice_buffer);
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Pass1(uint3 dispatch_thread_id : SV_DispatchThreadID)
{
    float3 position = float3(dispatch_thread_id);
    SimulationDataOps::copy_buffer_information_at_position(position, temp_gauge_lattice_buffer, crnt_gauge_potentials_lattice_buffer);
}
