#pragma kernel Pass0

#define THREAD_GROUP_SIZE_X 64
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1
#define THREAD_GROUP_SIZE (THREAD_GROUP_SIZE_X * THREAD_GROUP_SIZE_Y * THREAD_GROUP_SIZE_Z)

#define SPATIAL_DIMENSIONALITY 3

#include "../../../src/dynamics/guardrails/passive_scaling_energy_disspation.hlsl"

float dissipating_factor;

/// --------------------------------------------------------------------------------------------------------------
/// This compute-shader represents the entry point for an operation in FieldForge's configurable compute-pipeline.
/// --------------------------------------------------------------------------------------------------------------
/// This pipeline operation applies energy dissipation to the simulation, by scaling down the fermion and gauge fields
/// by the same fraction at every position in the simulation.
/// Properties:
/// â€¢ dissipating_factor (float)
///   This parameter <dissipating_factor> is the fraction taken away from the fields as they are scaled down every frame
///   via this compute shader execution.
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Pass0(uint3 dispatch_thread_id : SV_DispatchThreadID)
{
    dissipating_factor = dissipating_factor ? dissipating_factor : 0.005f;

    float3 position = float3(dispatch_thread_id);
    Guardrails::PassiveScalingEnergyDissipation::dissipate_energy(position, dissipating_factor);
}
